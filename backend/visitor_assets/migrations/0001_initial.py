# Generated by Django 4.2.10 on 2025-10-28 19:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "asset_type",
                    models.CharField(
                        choices=[
                            ("laptop", "Laptop"),
                            ("desktop", "Desktop Computer"),
                            ("phone", "Phone"),
                            ("tablet", "Tablet"),
                            ("vehicle", "Vehicle"),
                            ("equipment", "Equipment"),
                            ("furniture", "Furniture"),
                            ("access_card", "Access Card"),
                            ("key", "Key"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "asset_tag",
                    models.CharField(
                        help_text="Unique asset identifier", max_length=100, unique=True
                    ),
                ),
                ("serial_number", models.CharField(blank=True, max_length=200)),
                ("manufacturer", models.CharField(blank=True, max_length=200)),
                ("model", models.CharField(blank=True, max_length=200)),
                ("description", models.TextField(blank=True)),
                ("purchase_date", models.DateField(blank=True, null=True)),
                (
                    "purchase_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "current_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("current_location", models.CharField(max_length=500)),
                (
                    "home_location",
                    models.CharField(
                        help_text="Default/assigned location", max_length=500
                    ),
                ),
                ("has_gps", models.BooleanField(default=False)),
                (
                    "last_gps_lat",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "last_gps_lon",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("last_gps_update", models.DateTimeField(blank=True, null=True)),
                ("rfid_tag", models.CharField(blank=True, max_length=100)),
                ("iot_device_id", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("assigned", "Assigned"),
                            ("in_use", "In Use"),
                            ("maintenance", "Under Maintenance"),
                            ("lost", "Lost"),
                            ("stolen", "Stolen"),
                            ("retired", "Retired"),
                        ],
                        default="available",
                        max_length=20,
                    ),
                ),
                ("last_maintenance_date", models.DateField(blank=True, null=True)),
                ("next_maintenance_date", models.DateField(blank=True, null=True)),
                (
                    "maintenance_interval_days",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "predicted_failure_date",
                    models.DateField(
                        blank=True, help_text="AI-predicted failure", null=True
                    ),
                ),
                (
                    "failure_probability",
                    models.FloatField(
                        blank=True, help_text="Probability 0-1", null=True
                    ),
                ),
                ("assigned_at", models.DateTimeField(blank=True, null=True)),
                ("photo_url", models.URLField(blank=True)),
                ("qr_code", models.TextField(blank=True)),
                ("meta", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_assets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assets",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Visitor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("company", models.CharField(blank=True, max_length=200)),
                (
                    "visitor_type",
                    models.CharField(
                        choices=[
                            ("guest", "Guest"),
                            ("contractor", "Contractor"),
                            ("vendor", "Vendor"),
                            ("delivery", "Delivery Person"),
                            ("interviewer", "Job Candidate"),
                            ("vip", "VIP"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pre_registered", "Pre-Registered"),
                            ("checked_in", "Checked In"),
                            ("on_premises", "On Premises"),
                            ("checked_out", "Checked Out"),
                            ("blacklisted", "Blacklisted"),
                        ],
                        default="pre_registered",
                        max_length=20,
                    ),
                ),
                (
                    "id_type",
                    models.CharField(
                        blank=True,
                        help_text="Driver's License, Passport, etc.",
                        max_length=50,
                    ),
                ),
                ("id_number", models.CharField(blank=True, max_length=100)),
                ("photo_url", models.URLField(blank=True, help_text="Visitor photo")),
                (
                    "face_embedding",
                    models.BinaryField(
                        blank=True, help_text="Face recognition embedding", null=True
                    ),
                ),
                ("purpose_of_visit", models.TextField()),
                ("department_to_visit", models.CharField(blank=True, max_length=200)),
                (
                    "risk_score",
                    models.FloatField(
                        default=0.0, help_text="AI-calculated risk score 0-1"
                    ),
                ),
                ("is_on_watchlist", models.BooleanField(default=False)),
                ("watchlist_reason", models.TextField(blank=True)),
                ("requires_escort", models.BooleanField(default=False)),
                (
                    "background_check_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("not_required", "Not Required"),
                        ],
                        default="not_required",
                        max_length=20,
                    ),
                ),
                ("nda_signed", models.BooleanField(default=False)),
                ("nda_signed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "agreements",
                    models.JSONField(
                        blank=True, default=list, help_text="List of signed agreements"
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "visit_count",
                    models.IntegerField(default=0, help_text="Number of visits"),
                ),
                ("last_visit_at", models.DateTimeField(blank=True, null=True)),
                (
                    "host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="hosted_visitors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="visitors",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MovementLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        choices=[("visitor", "Visitor"), ("asset", "Asset")],
                        max_length=20,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("check_in", "Check In"),
                            ("check_out", "Check Out"),
                            ("zone_entry", "Zone Entry"),
                            ("zone_exit", "Zone Exit"),
                            ("location_change", "Location Change"),
                        ],
                        max_length=20,
                    ),
                ),
                ("from_location", models.CharField(blank=True, max_length=500)),
                ("to_location", models.CharField(max_length=500)),
                ("zone", models.CharField(blank=True, max_length=200)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("timestamp", models.DateTimeField(db_index=True)),
                (
                    "detection_method",
                    models.CharField(
                        choices=[
                            ("manual", "Manual Entry"),
                            ("rfid", "RFID Scan"),
                            ("gps", "GPS Tracking"),
                            ("camera", "Camera Detection"),
                            ("qr", "QR Code Scan"),
                        ],
                        default="manual",
                        max_length=50,
                    ),
                ),
                ("photo_url", models.URLField(blank=True)),
                ("meta", models.JSONField(blank=True, default=dict)),
                ("notes", models.TextField(blank=True)),
                (
                    "asset",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movements",
                        to="visitor_assets.asset",
                    ),
                ),
                (
                    "moved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="movements_performed",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movement_logs",
                        to="core.organization",
                    ),
                ),
                (
                    "visitor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movements",
                        to="visitor_assets.visitor",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AssetAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assigned_at", models.DateTimeField()),
                ("returned_at", models.DateTimeField(blank=True, null=True)),
                ("expected_return_at", models.DateTimeField(blank=True, null=True)),
                ("assignment_reason", models.TextField(blank=True)),
                (
                    "location_at_assignment",
                    models.CharField(blank=True, max_length=500),
                ),
                (
                    "condition_at_assignment",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                        ],
                        default="good",
                        max_length=20,
                    ),
                ),
                ("condition_at_return", models.CharField(blank=True, max_length=20)),
                ("condition_notes", models.TextField(blank=True)),
                ("is_overdue", models.BooleanField(default=False)),
                ("is_returned", models.BooleanField(default=False)),
                ("notes", models.TextField(blank=True)),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="visitor_assets.asset",
                    ),
                ),
                (
                    "assigned_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_assets_to_others",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asset_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asset_assignments",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["-assigned_at"],
            },
        ),
        migrations.CreateModel(
            name="VisitorPass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pass_type",
                    models.CharField(
                        choices=[
                            ("day_pass", "Day Pass"),
                            ("multi_day", "Multi-Day Pass"),
                            ("contractor", "Contractor Pass"),
                            ("temp_employee", "Temporary Employee"),
                        ],
                        max_length=20,
                    ),
                ),
                ("pass_number", models.CharField(max_length=50, unique=True)),
                (
                    "qr_code",
                    models.TextField(blank=True, help_text="QR code data for scanning"),
                ),
                ("valid_from", models.DateTimeField()),
                ("valid_until", models.DateTimeField()),
                (
                    "allowed_zones",
                    models.JSONField(
                        default=list, help_text="List of zone IDs visitor can access"
                    ),
                ),
                ("checked_in_at", models.DateTimeField(blank=True, null=True)),
                ("checked_out_at", models.DateTimeField(blank=True, null=True)),
                ("check_in_location", models.CharField(blank=True, max_length=200)),
                ("check_out_location", models.CharField(blank=True, max_length=200)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("expired", "Expired"),
                            ("revoked", "Revoked"),
                            ("used", "Used"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                ("revocation_reason", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "issued_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="issued_passes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="visitor_passes",
                        to="core.organization",
                    ),
                ),
                (
                    "revoked_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="revoked_passes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "visitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="passes",
                        to="visitor_assets.visitor",
                    ),
                ),
            ],
            options={
                "ordering": ["-issued_at"],
                "indexes": [
                    models.Index(
                        fields=["pass_number"], name="visitor_ass_pass_nu_bafc07_idx"
                    ),
                    models.Index(
                        fields=["visitor", "status"],
                        name="visitor_ass_visitor_1bd485_idx",
                    ),
                    models.Index(
                        fields=["valid_from", "valid_until"],
                        name="visitor_ass_valid_f_b65600_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="VisitorAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                (
                    "hour",
                    models.IntegerField(
                        blank=True, help_text="Hour of day 0-23", null=True
                    ),
                ),
                ("total_visitors", models.IntegerField(default=0)),
                ("new_visitors", models.IntegerField(default=0)),
                ("repeat_visitors", models.IntegerField(default=0)),
                ("vip_visitors", models.IntegerField(default=0)),
                ("guest_count", models.IntegerField(default=0)),
                ("contractor_count", models.IntegerField(default=0)),
                ("vendor_count", models.IntegerField(default=0)),
                (
                    "avg_visit_duration_minutes",
                    models.FloatField(blank=True, null=True),
                ),
                ("avg_check_in_time_minutes", models.FloatField(blank=True, null=True)),
                ("top_departments", models.JSONField(blank=True, default=list)),
                ("peak_hour", models.IntegerField(blank=True, null=True)),
                ("anomaly_count", models.IntegerField(default=0)),
                ("high_risk_visitors", models.IntegerField(default=0)),
                (
                    "predicted_tomorrow",
                    models.IntegerField(
                        blank=True, help_text="AI prediction", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="visitor_analytics",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["-date", "-hour"],
                "indexes": [
                    models.Index(
                        fields=["organization", "date"],
                        name="visitor_ass_organiz_a05123_idx",
                    )
                ],
                "unique_together": {("organization", "date", "hour")},
            },
        ),
        migrations.AddIndex(
            model_name="visitor",
            index=models.Index(
                fields=["organization", "status"], name="visitor_ass_organiz_b00c14_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="visitor",
            index=models.Index(fields=["email"], name="visitor_ass_email_523ed7_idx"),
        ),
        migrations.AddIndex(
            model_name="visitor",
            index=models.Index(fields=["host"], name="visitor_ass_host_id_49e30d_idx"),
        ),
        migrations.AddIndex(
            model_name="movementlog",
            index=models.Index(
                fields=["organization", "timestamp"],
                name="visitor_ass_organiz_ebadfd_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="movementlog",
            index=models.Index(
                fields=["visitor", "timestamp"], name="visitor_ass_visitor_47aa5c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="movementlog",
            index=models.Index(
                fields=["asset", "timestamp"], name="visitor_ass_asset_i_7e1f67_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assetassignment",
            index=models.Index(
                fields=["asset", "is_returned"], name="visitor_ass_asset_i_288ed8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assetassignment",
            index=models.Index(
                fields=["assigned_to", "is_returned"],
                name="visitor_ass_assigne_9b9614_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["organization", "status"], name="visitor_ass_organiz_2ffd1b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["asset_tag"], name="visitor_ass_asset_t_e1b64c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["assigned_to"], name="visitor_ass_assigne_22609d_idx"
            ),
        ),
    ]
