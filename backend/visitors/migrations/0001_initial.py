# Generated by Django 4.2.10 on 2025-10-29 02:11

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("access_control", "0001_initial"),
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "asset_type",
                    models.CharField(
                        choices=[
                            ("laptop", "Laptop"),
                            ("desktop", "Desktop Computer"),
                            ("mobile", "Mobile Device"),
                            ("tablet", "Tablet"),
                            ("vehicle", "Vehicle"),
                            ("equipment", "Equipment"),
                            ("tool", "Tool"),
                            ("key", "Key/Access Card"),
                            ("camera", "Camera/Recording Device"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("asset_tag", models.CharField(max_length=100, unique=True)),
                (
                    "serial_number",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("manufacturer", models.CharField(blank=True, max_length=100)),
                ("model", models.CharField(blank=True, max_length=100)),
                ("purchase_date", models.DateField(blank=True, null=True)),
                (
                    "purchase_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("warranty_expiry", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("assigned", "Assigned"),
                            ("in_use", "In Use"),
                            ("maintenance", "Under Maintenance"),
                            ("retired", "Retired"),
                            ("lost", "Lost"),
                            ("damaged", "Damaged"),
                        ],
                        default="available",
                        max_length=20,
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                        ],
                        default="good",
                        max_length=20,
                    ),
                ),
                ("location", models.CharField(max_length=200)),
                ("assigned_at", models.DateTimeField(blank=True, null=True)),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="assets/images/"
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("specifications", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_assets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "current_assignee",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_assets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assets",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["asset_tag"],
            },
        ),
        migrations.CreateModel(
            name="Visitor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("company", models.CharField(blank=True, max_length=200)),
                (
                    "visitor_type",
                    models.CharField(
                        choices=[
                            ("guest", "Guest"),
                            ("contractor", "Contractor"),
                            ("vendor", "Vendor"),
                            ("delivery", "Delivery Personnel"),
                            ("maintenance", "Maintenance"),
                            ("emergency", "Emergency Services"),
                            ("other", "Other"),
                        ],
                        default="guest",
                        max_length=20,
                    ),
                ),
                ("id_type", models.CharField(blank=True, max_length=50)),
                ("id_number", models.CharField(blank=True, max_length=100)),
                (
                    "photo",
                    models.ImageField(
                        blank=True, null=True, upload_to="visitors/photos/"
                    ),
                ),
                ("purpose", models.TextField()),
                ("department", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pre_registered", "Pre-Registered"),
                            ("checked_in", "Checked In"),
                            ("checked_out", "Checked Out"),
                            ("cancelled", "Cancelled"),
                            ("blacklisted", "Blacklisted"),
                        ],
                        default="pre_registered",
                        max_length=20,
                    ),
                ),
                ("expected_arrival", models.DateTimeField()),
                ("expected_departure", models.DateTimeField()),
                ("actual_arrival", models.DateTimeField(blank=True, null=True)),
                ("actual_departure", models.DateTimeField(blank=True, null=True)),
                ("ai_extracted", models.BooleanField(default=False)),
                ("ai_confidence", models.FloatField(blank=True, null=True)),
                (
                    "ai_suggested_access_level",
                    models.CharField(blank=True, max_length=50),
                ),
                (
                    "ai_predicted_duration",
                    models.IntegerField(
                        blank=True,
                        help_text="Predicted visit duration in minutes",
                        null=True,
                    ),
                ),
                ("extracted_data", models.JSONField(blank=True, default=dict)),
                ("notes", models.TextField(blank=True)),
                ("emergency_contact", models.CharField(blank=True, max_length=100)),
                (
                    "emergency_phone",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("vehicle_plate", models.CharField(blank=True, max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_visitors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "host",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="hosted_visitors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="visitors",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["-expected_arrival"],
            },
        ),
        migrations.CreateModel(
            name="MovementLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "movement_type",
                    models.CharField(
                        choices=[
                            ("asset_checkout", "Asset Check-Out"),
                            ("asset_checkin", "Asset Check-In"),
                            ("visitor_checkin", "Visitor Check-In"),
                            ("visitor_checkout", "Visitor Check-Out"),
                            ("location_transfer", "Location Transfer"),
                            ("zone_entry", "Zone Entry"),
                            ("zone_exit", "Zone Exit"),
                        ],
                        max_length=20,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("from_location", models.CharField(blank=True, max_length=200)),
                ("to_location", models.CharField(blank=True, max_length=200)),
                ("verification_method", models.CharField(blank=True, max_length=50)),
                ("notes", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "access_point",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="visitor_movements",
                        to="access_control.accesspoint",
                    ),
                ),
                (
                    "asset",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movements",
                        to="visitors.asset",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movement_logs",
                        to="core.organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_movements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "visitor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movements",
                        to="visitors.visitor",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AssetAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                ("expected_return", models.DateTimeField(blank=True, null=True)),
                ("actual_return", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("returned", "Returned"),
                            ("overdue", "Overdue"),
                            ("lost", "Lost/Missing"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "condition_on_assignment",
                    models.CharField(blank=True, max_length=20),
                ),
                ("condition_on_return", models.CharField(blank=True, max_length=20)),
                ("assignment_notes", models.TextField(blank=True)),
                ("return_notes", models.TextField(blank=True)),
                (
                    "asset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="visitors.asset",
                    ),
                ),
                (
                    "assigned_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="issued_assignments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asset_assignments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-assigned_at"],
            },
        ),
        migrations.CreateModel(
            name="VisitorPass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pass_type",
                    models.CharField(
                        choices=[
                            ("qr_code", "QR Code"),
                            ("nfc", "NFC Card"),
                            ("biometric", "Biometric"),
                            ("pin", "PIN Code"),
                            ("digital", "Digital Pass"),
                        ],
                        default="qr_code",
                        max_length=20,
                    ),
                ),
                ("pass_code", models.CharField(max_length=100, unique=True)),
                ("access_level", models.CharField(default="visitor", max_length=50)),
                ("allowed_areas", models.JSONField(default=list)),
                ("valid_from", models.DateTimeField()),
                ("valid_until", models.DateTimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("expired", "Expired"),
                            ("revoked", "Revoked"),
                            ("pending", "Pending Activation"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("times_used", models.IntegerField(default=0)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("max_uses", models.IntegerField(blank=True, null=True)),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                ("revocation_reason", models.TextField(blank=True)),
                (
                    "access_points",
                    models.ManyToManyField(
                        blank=True,
                        related_name="visitor_passes",
                        to="access_control.accesspoint",
                    ),
                ),
                (
                    "issued_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "revoked_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="revoked_passes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "visitor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="passes",
                        to="visitors.visitor",
                    ),
                ),
            ],
            options={
                "ordering": ["-issued_at"],
                "indexes": [
                    models.Index(
                        fields=["pass_code"], name="visitors_vi_pass_co_45a7ec_idx"
                    ),
                    models.Index(
                        fields=["status", "valid_until"],
                        name="visitors_vi_status_cdf394_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="visitor",
            index=models.Index(
                fields=["status", "expected_arrival"],
                name="visitors_vi_status_313e42_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="visitor",
            index=models.Index(
                fields=["organization", "status"], name="visitors_vi_organiz_26b70c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="movementlog",
            index=models.Index(
                fields=["movement_type", "timestamp"],
                name="visitors_mo_movemen_ca988a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="movementlog",
            index=models.Index(
                fields=["organization", "timestamp"],
                name="visitors_mo_organiz_3dd179_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assetassignment",
            index=models.Index(
                fields=["status", "expected_return"],
                name="visitors_as_status_08e965_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="assetassignment",
            index=models.Index(
                fields=["assignee", "status"], name="visitors_as_assigne_e90e1b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["asset_tag"], name="visitors_as_asset_t_05afaf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["status", "asset_type"], name="visitors_as_status_629a8d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="asset",
            index=models.Index(
                fields=["organization", "status"], name="visitors_as_organiz_a303fa_idx"
            ),
        ),
    ]
