# Generated by Django 4.2.10 on 2025-10-28 19:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccessCredential",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "credential_type",
                    models.CharField(
                        choices=[
                            ("badge", "Badge/Card"),
                            ("rfid", "RFID Tag"),
                            ("biometric", "Biometric"),
                            ("pin", "PIN Code"),
                            ("mobile", "Mobile App"),
                            ("qr", "QR Code"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "credential_id",
                    models.CharField(
                        help_text="Card number, RFID ID, etc.",
                        max_length=200,
                        unique=True,
                    ),
                ),
                (
                    "biometric_template",
                    models.BinaryField(
                        blank=True, help_text="Encrypted biometric data", null=True
                    ),
                ),
                (
                    "pin_code",
                    models.CharField(
                        blank=True, help_text="Hashed PIN", max_length=100
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("lost", "Lost/Stolen"),
                            ("expired", "Expired"),
                            ("revoked", "Revoked"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
                ("failed_attempts", models.IntegerField(default=0)),
                ("is_locked", models.BooleanField(default=False)),
                ("locked_until", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="credentials",
                        to="core.organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_credentials",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-issued_at"],
            },
        ),
        migrations.CreateModel(
            name="AccessSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "days_of_week",
                    models.JSONField(
                        default=list,
                        help_text="List of days: ['monday', 'tuesday', ...] or [] for all days",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(help_text="Access allowed from this time"),
                ),
                (
                    "end_time",
                    models.TimeField(help_text="Access allowed until this time"),
                ),
                ("valid_from", models.DateField(blank=True, null=True)),
                ("valid_until", models.DateField(blank=True, null=True)),
                ("exclude_holidays", models.BooleanField(default=False)),
                (
                    "holiday_calendar",
                    models.JSONField(
                        blank=True, default=list, help_text="List of holiday dates"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_schedules",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AccessPoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "point_type",
                    models.CharField(
                        choices=[
                            ("door", "Door"),
                            ("gate", "Gate"),
                            ("turnstile", "Turnstile"),
                            ("elevator", "Elevator"),
                            ("zone", "Security Zone"),
                            ("system", "Digital System"),
                            ("parking", "Parking Barrier"),
                        ],
                        max_length=20,
                    ),
                ),
                ("location", models.CharField(max_length=500)),
                ("description", models.TextField(blank=True)),
                (
                    "hardware_id",
                    models.CharField(
                        help_text="Physical device ID", max_length=100, unique=True
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("maintenance", "Under Maintenance"),
                            ("error", "Error"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "is_secure",
                    models.BooleanField(
                        default=True, help_text="Is the point physically secured?"
                    ),
                ),
                ("requires_escort", models.BooleanField(default=False)),
                ("allow_tailgating_detection", models.BooleanField(default=True)),
                ("max_access_attempts", models.IntegerField(default=3)),
                ("lockdown_enabled", models.BooleanField(default=False)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("meta", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_activity_at", models.DateTimeField(blank=True, null=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_points",
                        to="core.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["location", "name"],
            },
        ),
        migrations.CreateModel(
            name="AccessPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "permission_type",
                    models.CharField(
                        choices=[
                            ("permanent", "Permanent Access"),
                            ("temporary", "Temporary Access"),
                            ("scheduled", "Scheduled Access"),
                            ("visitor", "Visitor Access"),
                        ],
                        max_length=20,
                    ),
                ),
                ("valid_from", models.DateTimeField()),
                ("valid_until", models.DateTimeField(blank=True, null=True)),
                ("requires_pin", models.BooleanField(default=False)),
                ("requires_biometric", models.BooleanField(default=False)),
                ("requires_approval", models.BooleanField(default=False)),
                (
                    "max_daily_entries",
                    models.IntegerField(
                        blank=True, help_text="Limit entries per day", null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_revoked", models.BooleanField(default=False)),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                ("revocation_reason", models.TextField(blank=True)),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "access_point",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permissions",
                        to="access_control.accesspoint",
                    ),
                ),
                (
                    "granted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_permissions",
                        to="core.organization",
                    ),
                ),
                (
                    "revoked_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="revoked_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "schedule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="permissions",
                        to="access_control.accessschedule",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-granted_at"],
            },
        ),
        migrations.CreateModel(
            name="AccessLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("entry", "Entry"),
                            ("exit", "Exit"),
                            ("denied", "Access Denied"),
                            ("forced", "Forced Entry"),
                            ("held_open", "Door Held Open"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_granted", models.BooleanField(default=False)),
                (
                    "denial_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("no_permission", "No Permission"),
                            ("invalid_credential", "Invalid Credential"),
                            ("expired", "Expired"),
                            ("outside_schedule", "Outside Allowed Schedule"),
                            ("revoked", "Revoked"),
                            ("lockdown", "Lockdown Active"),
                            ("max_attempts", "Max Attempts Exceeded"),
                        ],
                        max_length=50,
                    ),
                ),
                ("timestamp", models.DateTimeField(db_index=True)),
                (
                    "is_tailgating",
                    models.BooleanField(
                        default=False, help_text="Multiple persons detected"
                    ),
                ),
                (
                    "is_anomaly",
                    models.BooleanField(default=False, help_text="Flagged by AI"),
                ),
                (
                    "anomaly_score",
                    models.FloatField(
                        blank=True, help_text="AI anomaly score 0-1", null=True
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        blank=True,
                        choices=[("in", "In"), ("out", "Out")],
                        max_length=10,
                    ),
                ),
                (
                    "companion_count",
                    models.IntegerField(
                        default=0, help_text="Number of people accompanying"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("device_info", models.JSONField(blank=True, default=dict)),
                (
                    "photo_url",
                    models.URLField(
                        blank=True, help_text="Photo captured at access point"
                    ),
                ),
                ("video_clip_url", models.URLField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "access_point",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="access_control.accesspoint",
                    ),
                ),
                (
                    "credential",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="logs",
                        to="access_control.accesscredential",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_logs",
                        to="core.organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="access_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AccessAnomaly",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "anomaly_type",
                    models.CharField(
                        choices=[
                            ("unusual_time", "Unusual Time Access"),
                            ("unusual_location", "Unusual Location"),
                            ("rapid_sequence", "Rapid Sequential Access"),
                            ("simultaneous", "Simultaneous Access Different Locations"),
                            ("tailgating", "Tailgating Detected"),
                            ("pattern_break", "Pattern Break"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("confidence_score", models.FloatField(help_text="AI confidence 0-1")),
                ("description", models.TextField()),
                (
                    "ai_model_used",
                    models.CharField(default="isolation_forest", max_length=100),
                ),
                (
                    "baseline_pattern",
                    models.JSONField(default=dict, help_text="User's normal pattern"),
                ),
                (
                    "detected_pattern",
                    models.JSONField(default=dict, help_text="Anomalous pattern"),
                ),
                ("is_reviewed", models.BooleanField(default=False)),
                ("is_false_positive", models.BooleanField(default=False)),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("review_notes", models.TextField(blank=True)),
                ("detected_at", models.DateTimeField(auto_now_add=True)),
                (
                    "access_log",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anomalies",
                        to="access_control.accesslog",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_anomalies",
                        to="core.organization",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_anomalies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_anomalies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Access anomalies",
                "ordering": ["-detected_at"],
            },
        ),
        migrations.AddIndex(
            model_name="accesspoint",
            index=models.Index(
                fields=["organization", "status"], name="access_cont_organiz_96c7f0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accesspoint",
            index=models.Index(
                fields=["hardware_id"], name="access_cont_hardwar_8e07bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accesspermission",
            index=models.Index(
                fields=["user", "is_active"], name="access_cont_user_id_50480a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accesspermission",
            index=models.Index(
                fields=["access_point", "is_active"],
                name="access_cont_access__ce7676_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="accesspermission",
            unique_together={("user", "access_point")},
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(
                fields=["organization", "timestamp"],
                name="access_cont_organiz_f63517_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(
                fields=["access_point", "timestamp"],
                name="access_cont_access__ada7a2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(
                fields=["user", "timestamp"], name="access_cont_user_id_5d7d12_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(
                fields=["is_anomaly", "timestamp"],
                name="access_cont_is_anom_c1432b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="accesscredential",
            index=models.Index(
                fields=["credential_id"], name="access_cont_credent_6bb701_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accesscredential",
            index=models.Index(
                fields=["user", "status"], name="access_cont_user_id_0ad6f4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accessanomaly",
            index=models.Index(
                fields=["severity", "is_reviewed"],
                name="access_cont_severit_974d9f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="accessanomaly",
            index=models.Index(
                fields=["user", "detected_at"], name="access_cont_user_id_4b0628_idx"
            ),
        ),
    ]
