version: '3.8'

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: safenest-postgres
    environment:
      POSTGRES_DB: safenest
      POSTGRES_USER: safenest
      POSTGRES_PASSWORD: safenest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U safenest"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery & Channels
  redis:
    image: redis:7-alpine
    container_name: safenest-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: safenest-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: safenest-backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             daphne -b 0.0.0.0 -p 8000 safenest.asgi:application"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: safenest-celery-worker
    command: celery -A safenest worker -l info
    volumes:
      - ./backend:/app
      - media_volume:/app/media
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
    depends_on:
      - postgres
      - redis
      - backend

  # Celery Beat (Scheduled Tasks)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: safenest-celery-beat
    command: celery -A safenest beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
      - backend

volumes:
  postgres_data:
  redis_data:
  minio_data:
  static_volume:
  media_volume:

networks:
  default:
    name: safenest-network